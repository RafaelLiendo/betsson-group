/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.18.7.0 (NJsonSchema v9.10.70.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const BASE_API_URL = new InjectionToken<string>('BASE_API_URL');

export interface IService {
    /**
     * @return Success
     */
    apiAutocompleteMoviesBySearchGet(search: string): Observable<AutocompleteMovie[]>;
    /**
     * @return Success
     */
    apiGenresGet(): Observable<Genre[]>;
    /**
     * @return Success
     */
    apiMoviesGet(): Observable<Movie[]>;
    /**
     * @return Success
     */
    apiMoviesByIdGet(id: number): Observable<Movie>;
}

@Injectable({
    providedIn: 'root'
})
export class Service implements IService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_API_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    apiAutocompleteMoviesBySearchGet(search: string): Observable<AutocompleteMovie[]> {
        let url_ = this.baseUrl + "/api/AutocompleteMovies/{search}";
        if (search === undefined || search === null)
            throw new Error("The parameter 'search' must be defined.");
        url_ = url_.replace("{search}", encodeURIComponent("" + search)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiAutocompleteMoviesBySearchGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAutocompleteMoviesBySearchGet(<any>response_);
                } catch (e) {
                    return <Observable<AutocompleteMovie[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<AutocompleteMovie[]>><any>_observableThrow(response_);
        }));
    }

    protected processApiAutocompleteMoviesBySearchGet(response: HttpResponseBase): Observable<AutocompleteMovie[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(AutocompleteMovie.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AutocompleteMovie[]>(<any>null);
    }

    /**
     * @return Success
     */
    apiGenresGet(): Observable<Genre[]> {
        let url_ = this.baseUrl + "/api/Genres";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiGenresGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiGenresGet(<any>response_);
                } catch (e) {
                    return <Observable<Genre[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Genre[]>><any>_observableThrow(response_);
        }));
    }

    protected processApiGenresGet(response: HttpResponseBase): Observable<Genre[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Genre.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Genre[]>(<any>null);
    }

    /**
     * @return Success
     */
    apiMoviesGet(): Observable<Movie[]> {
        let url_ = this.baseUrl + "/api/Movies";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiMoviesGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiMoviesGet(<any>response_);
                } catch (e) {
                    return <Observable<Movie[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Movie[]>><any>_observableThrow(response_);
        }));
    }

    protected processApiMoviesGet(response: HttpResponseBase): Observable<Movie[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Movie.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Movie[]>(<any>null);
    }

    /**
     * @return Success
     */
    apiMoviesByIdGet(id: number): Observable<Movie> {
        let url_ = this.baseUrl + "/api/Movies/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiMoviesByIdGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiMoviesByIdGet(<any>response_);
                } catch (e) {
                    return <Observable<Movie>><any>_observableThrow(e);
                }
            } else
                return <Observable<Movie>><any>_observableThrow(response_);
        }));
    }

    protected processApiMoviesByIdGet(response: HttpResponseBase): Observable<Movie> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Movie.fromJS(resultData200) : new Movie();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Movie>(<any>null);
    }
}

export class AutocompleteMovie implements IAutocompleteMovie {
    id?: number;
    name?: string;

    constructor(data?: IAutocompleteMovie) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): AutocompleteMovie {
        data = typeof data === 'object' ? data : {};
        let result = new AutocompleteMovie();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IAutocompleteMovie {
    id?: number;
    name?: string;
}

export class Genre implements IGenre {
    id?: number;
    key?: string;
    name?: string;

    constructor(data?: IGenre) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.key = data["key"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): Genre {
        data = typeof data === 'object' ? data : {};
        let result = new Genre();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["key"] = this.key;
        data["name"] = this.name;
        return data; 
    }
}

export interface IGenre {
    id?: number;
    key?: string;
    name?: string;
}

export class Movie implements IMovie {
    id?: number;
    key?: string;
    name?: string;
    description?: string;
    movieGenres?: MovieGenre[];
    rate?: string;
    length?: string;
    img?: string;

    constructor(data?: IMovie) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.key = data["key"];
            this.name = data["name"];
            this.description = data["description"];
            if (data["movieGenres"] && data["movieGenres"].constructor === Array) {
                this.movieGenres = [];
                for (let item of data["movieGenres"])
                    this.movieGenres.push(MovieGenre.fromJS(item));
            }
            this.rate = data["rate"];
            this.length = data["length"];
            this.img = data["img"];
        }
    }

    static fromJS(data: any): Movie {
        data = typeof data === 'object' ? data : {};
        let result = new Movie();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["key"] = this.key;
        data["name"] = this.name;
        data["description"] = this.description;
        if (this.movieGenres && this.movieGenres.constructor === Array) {
            data["movieGenres"] = [];
            for (let item of this.movieGenres)
                data["movieGenres"].push(item.toJSON());
        }
        data["rate"] = this.rate;
        data["length"] = this.length;
        data["img"] = this.img;
        return data; 
    }
}

export interface IMovie {
    id?: number;
    key?: string;
    name?: string;
    description?: string;
    movieGenres?: MovieGenre[];
    rate?: string;
    length?: string;
    img?: string;
}

export class MovieGenre implements IMovieGenre {
    movieId?: number;
    genreId?: number;
    genre?: Genre;

    constructor(data?: IMovieGenre) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.movieId = data["movieId"];
            this.genreId = data["genreId"];
            this.genre = data["genre"] ? Genre.fromJS(data["genre"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MovieGenre {
        data = typeof data === 'object' ? data : {};
        let result = new MovieGenre();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["movieId"] = this.movieId;
        data["genreId"] = this.genreId;
        data["genre"] = this.genre ? this.genre.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IMovieGenre {
    movieId?: number;
    genreId?: number;
    genre?: Genre;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}